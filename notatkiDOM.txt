Linki:
------
***https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model
https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction
https://www.html5rocks.com/en/tutorials/internals/howbrowserswork/#The_browser_main_functionality
http://taligarsiel.com/Projects/howbrowserswork1.htm#Parsing_general - świetnie opisane jak parser działa i jak DOM powstaje

https://www.quirksmode.org/js/events_order.html - event propagation, buble, capturing

Pytania:
---------
1.Co to jest DOM?
DOM - Document Object Model, api dla języków programowania(głównie JavaScriptu) by mogły
komunikować się ze stroną w HTMLu, modyfikować jej zawartość, style.
Przeglądarki implementują standardy zamieszczone na stronach:
https://dom.spec.whatwg.org/
oraz
https://www.w3.org/DOM/

2.Czym w DOM jest strona HTML?
Jest to document, zarówno w HTMLu jak i wyświetlany w przeglądarce.

3.Czy DOM jest językiem programowania?
Nie, nie jest. Ale bez niego JS nie miałby pojęcia o HTMLu, XMLu
Zawartość strony jest przechowywana w DOM.

4.Czym różnią się metody window.onload vs. document.onload?
window.onload - jest wywoływany gdy DOM powstanie, zostanie załadowana cała strona oraz
jej zawartość, tj. skrypty, css, orazki

document.onload - jest wywoływany gdy kiedy powstanie DOM, ale nie zostanie załadowana
całość zawartości strony

5.Jak jest parsowana strona html, kiedy jest tworzony DOM, kiedy są odpalane pliki
js pobierane lub będące inline w elemencie head htmla?

Na początku przeglądarka pobiera dokument .html z sieci.
Następnie, zaczyna parsować ten dokument i tworzyć drzewo DOM ze sparsowanych elementów.
Następnie, gdy przeglądarka natknie się na odnośnik do zewnętrzengo skryptu, np.

<html>
<head>
    <sctipt src="http:/dobryskrypt.js...></sctipt>
    ...
przeglądarka pobiera ten skrypt i wstrzymuje parsowanie dalszej części htmla.
Po pobraniu skryptu, uruchamia go.
Gdy skrypt zostanie wykonany przeglądarka wznawia parsowanie dalszej części htmla.
https://stackoverflow.com/questions/436411/where-should-i-put-script-tags-in-html-markup?answertab=votes#tab-top

6.Dlaczego przeglądarka czeka na pobranie i wykonanie skryptu js?
Dlatego, że może w nim być kod zmieniający strukture htmla, dodający nowy element, np.
document.write("<p>nowy akapit</p>")

7.Dlaczego przy próbie pobrania elementu w skrypcie i zmiany jego tekstu dostajemy błąd:
Uncaught TypeError: Cannot set property 'innerHTML' of null
dla skryptu:
var ptext = document.getElementById("ptext");
            ptext.innerHTML = newtext;
?
Dlatego, że parser zatrzymał się na skrypcie, nie doszedł jeszcze do tego elementu w htmlu
i nie dodał do do drzewa DOM by móc po niego sięgać :)

8.Jakie atrybuty wprowadza HTML5 aby usprawnić pobieranie skryptów i parsowanie html?
HTML 5 wprowadza dwa atrybuty: async oraz defer. W obu przypadkach pobieranie skryptów
nie wstrzymuje pracy parsera i DOM jest budowany dalej. Możemy je stosować jedynie
podczas pobierania zewnętrzengo skryptu <script src="" async defer></script> - inaczej
nie zadziałają.

async- skrypty są pobierane równolegle, uruchamiane są asynchronicznie(asynchronously),
       zaraz po pobraniu(czyli ten który szybciej się pobierze jest odpalany jako pierwszy).
       Jeśli ustawimy async=false to skrypty wykonają się synchronicznie, sekwencyjnie, jeden po drugim.

defer- skrypty są odalane w kolejności, w jakiej wymieniliśmy je w htmlu. Są odpalane po
sparsowaniu całego dokumentu i utworzeniu pełnego DOMu ale jeszcze przed wywołaniem zdarzenia
DOMContentLoaded.

https://developers.google.com/speed/docs/insights/BlockingJS
https://developer.mozilla.org/en/docs/Web/HTML/Element/script

9.Kiedy są pobierane i wykonywane sktypty z atrybutami async i defer oraz bez tych atrybutów?

<script src="http://jQuery-3.2.1.js"></script>
parser dociera do sktyptu
wstrzyma dalsze parsowanie html
pobiera skrypt
wykonuje skrypt
wznawia parsowanie htmla

<script src="http://jQuery-3.2.1.js" async></script>
<script src="http://jPlny-3.2.1.js" async></script>
parser dociera do skryptu
pobiera skrypty i równolegle parsuje dalszą część html
gdy skończy pobierać skrypty, uruchamia je, który szybciej został pobrany
(nie czeka na zakończenie parsowania i zbudowanie DOMu by uruchomić skrypty)

<script src="http://jQuery-3.2.1.js" defer></script>
<script src="http://jPlny-3.2.1.js" defer></script>
parser dociera do sktyptów
pobiera skrypty i równolegle parsuje dalszą część html
gdy skończy pobierać skrypty parsować stronę, uruchamia je w takiej
kolejności w jakiej były wymienione w HTMLu
(czeka na zakończenie parsowania i zbudowanie DOMu by uruchomić skrypty)

http://www.growingwiththeweb.com/2014/02/async-vs-defer-attributes.html
https://stackoverflow.com/questions/10808109/script-tag-async-defer

10.Czy za pomocą skryptów pobieranych asynchronicznie (async lub defer) można
pisać do dokumentu?
Nie, nie można robić document.write('kod html');

11.Jakie są podstawowe interfejsy DOMu?
Window - reprezentuje przeglądarke
Document - reprezentuje całe drzewo DOM/załadowaną stronę
EventTarget - reprezentuje każdy obiekt, który może odbierać zdarzenia oraz rejestrować
            event handlery
Node - reprezentuje węzeł w drzewie dom, daje metody firstChild, lastChild
Element - reprezentuje każdy element, daje propertiesy jak id, className
HTMLElement - reprezentuje każdy element htmla, daje propertiesy, tj. title
EventTarget<-Node<-Document
EventTarget<-Node<-Element<-HTMLElement

14.Jaka jest różnica między obiektami Window a window w JS?
Window - jest funkcją, konstruktorem dla obiektu window. Nie możemy jednak użyć jej bezpośrednio by otworzyć nowe okno przeglądarki.
        Trzeba w tym celu użyć metody Window.open.
        Window.prototype przechowuje metody jakie posiada obiekt window.

window - object, jest zmienną globalną zawierającą instację Window odpowiadającą karcie w przeglądarce.
https://stackoverflow.com/questions/24008630/what-is-the-difference-between-window-and-window

13.Jaka jest różnica między obiektami w JS document vs Document?
Analogiczna jak Window i window
https://stackoverflow.com/questions/16790174/what-is-the-difference-between-document-and-document-in-javascript

14.Document.prototype vs document.__proto__?
Oba pola pokazują na zbiór metod obiektu.
https://stackoverflow.com/questions/9959727/proto-vs-prototype-in-javascript

15.Co zwraca document.getElementById('id') ?
Zwraca referencję na obiekt HTMLElement(obiekt DOMu)
document.getElementById('ptext') instanceof HTMLParagraphElement //return true

16.Jakie parametry przyjmuje metoda EventTarget.addEventListener(a, b)?
a - nazwa zdarzenia które ma zostać obsłużone, np. click, change
b - funckja javascriptowa lub obiekt implementujący EventListener interface obsługujący zdarzenie/event

17.Co reprezentuje interface DOM Event?
Odpowiada każdemu zdarzeniu w DOM, zarówno generowanemu przez użytkownika(myszką, klawiaturą) jak i
animacjami w javascripcie(zdarzenie zamknięcia reklamy).
https://developer.mozilla.org/en-US/docs/Web/API/Event/Event

18.Jak mogą być generowane zdarzenia?
Zdarzenia mogą być generowane przez kontrolki(button, select) lub customowo.

19.Jaki wzorzec używa się do ręcznego wywoływania zdarzeń w DOM?
utwórz-zainicjuj-wywołaj

20.Jak customowo można utworzyć i wywołać Event?
-za pomocą konstruktora Event(typeArg, eventInit) ,np.
var evt = new Event("look", {"bubbles":true, "cancelable":false}); //tworzymy i inicjalizujemy Event
document.addEventListener('look', function (e) {
  // e.target matches elem
}, false); //rejestrujemy handlera na event
document.dispatchEvent(evt); //wywołujemy Event na elemencie

-za pomocą metody document.createEvent(event)
var event = document.createEvent('Event'); //tworzymy Event danej klasy(tu mogą być też klasy dziedziczące po Event)
event.initEvent('build', true, true); // inicjalizujemy

elem.addEventListener('build', function (e) {
  // e.target matches elem
}, false); //rejestrujemy handlera na event

elem.dispatchEvent(event); // wywołujemy Event na elemencie

21.Jak są obsługiwane zdarzenia?
Zdarzenia są obsługiwane za pomocą metody w html, np. onclick="handleEvent()" lub
za pomocą zarejestrowanego listenera element.addEventListener('customClickEvent', function() {
}

22.Za co odpowiada pierwszy parametr konstruktora Event(typeArg, eventInit)?
Jest to nazwa Eventu. Domyślnie może to być: click albo możemy podać własną nazwę, np.
customClick. Nazwa ta będzie przechowywana pod polem Event.type.
Należy trzymać się tej nazwy rejestrując handlera, np.
element.addEventListener('customClick', function() {});


23.Porównaj zwykły event 'click' z customowym:
Zwykły 'click' generowany default przez button ma o wiele więcej pól.

'click' event:
--------------
bubbles:true
cancelBubble:false
cancelable:true
composed:true
currentTarget:null
defaultPrevented:false
detail:1
isTrusted:true
path:(8) [button, div, body, shadow, document-fragment, html, document, Window]
relatedTarget:null
returnValue:true
srcElement:button
target:button
type:"click"

'customClick' event:
--------------------
bubbles:true
cancelBubble:false
cancelable:false
composed:false
currentTarget:null
defaultPrevented:false
eventPhase:0
isTrusted:false
path:(8) [button#customButton, div, body, shadow, document-fragment, html, document, Window]
returnValue:true
srcElement:button#customButton
target:button#customButton
type:"customClickEvent"

24.Czym się różni event bubbling od capturing?
Event bubbling and capturing are two ways of propagating events which occur in an element that is
nested within another element, when both elements have registered a handle for that event

https://stackoverflow.com/questions/4616694/what-is-event-bubbling-and-capturing
https://www.quirksmode.org/js/events_order.html
http://catcode.com/domcontent/events/capture.html

25.Jakie są domyślne wartości dla opcji, którymi możemy zainicjować tworzony Event?
bubbles: false(dla wartości true zdarzenie będzie propagowane w górę DOMU i obsługiwane przez
listenery ancestors elements)

cancelable: false (dla wartości true można zamknąć zdarzenie. Zamknięcie zdarzenia polega na wywołaniu
na event.preventDefault() co powoduje że domyśle działania przeglądarki dla tego zdarzenia się nie uruchomią, np.
nie zaznaczy się checkbox. Zdarzenie będzie jednak dalej propagowane w DOMie.

composed: false
A Boolean which is true if the event will cross from the shadow DOM into the standard DOM after
reaching the shadow root (that is, the first node in the shadow DOM in which the event began to propagate).
Of course, propagation only occurs at all if the bubbles property is also true.
https://developer.mozilla.org/en-US/docs/Web/API/Event/Event

26.Jak sprawdzić ile i jakie listenery ma dany element DOMu?
Wywołując w konsoli getEventListeners(DOM object), np.

getEventListeners(document.getElementById("customButton"))
result:
{click: Array(1), customClickEvent: Array(3)}
click:Array(1)
0:{useCapture: false, passive: false, once: false, type: "click", listener: ƒ}
length:1

customClickEvent:Array(3)
0:{useCapture: false, passive: false, once: false, type: "customClickEvent", listener: ƒ}
1:{useCapture: false, passive: false, once: false, type: "customClickEvent", listener: ƒ}
2:{useCapture: false, passive: false, once: false, type: "customClickEvent", listener: ƒ}
length:3

27.Do czego służy metoda element.dispatchEvent(event)?
Służy do wywołania zdarzenia w bierzącym elemencie.
element.dispatchEvent(event)
event - obiekt zdarzenia które ma zostać wywołane
https://developer.mozilla.org/pl/docs/Web/API/Element/dispatchEvent

28.Czym różnią się metody event.stopPropagation() i event.preventDefault()?
event.stopPropagation() - gdy mamy button w divie i oba te elementy mają listenery na zdarzenie 'click'
to powoduje, że wykona się listener z button i dalej zdarzenie nie będzie propagowane.

event.preventDefault() - powoduje cancel the event, tzn. domyślna akcje przeglądarki dla tego eventu się nie wykona.
Będzie on propagowany jednak dalej w DOMie.
Calling preventDefault() during any stage of event flow cancels the event, meaning that any default action
normally taken by the implementation as a result of the event will not occur.
You can use Event.cancelable to check if the event is cancelable. Calling preventDefault() for a non-cancelable event has no effect.

https://stackoverflow.com/questions/5963669/whats-the-difference-between-event-stoppropagation-and-event-preventdefault

29.Co to shadow DOM?
Ma na celu ukrycie implementacji komponentów wykorzystywanych na naszej stronie.
https://www.sitepoint.com/the-basics-of-the-shadow-dom/

30.Jak można wstrzymać propagacje eventu w DOM?
Ustawiając Event.cancelBubble = true lub wywoływująć event.stopPropagation()

31.W jakich pokach zdarzenie przechowuje element, który je wywołał/wygenerował?
W polu target oraz srcElement. Pola te wskazują na ten sam i niezmienny obiekt HTML DOMu.

32.Jak można sprawdzić w jakim elemencie zdarzenie jest aktualnie obsługiwane?
Za pomocą pola event.currentTarget

33.Jak przeglądarki obsługują capturing oraz bubbling?
Gdy jest wywoływany event to w pierwszej kolejności szukane są handlery
dodane z flagą useCapture=true i one obsługują zdarzenie.
Następnie odbywa się bubbling zdarzenia.
FAZA 1 = capturing zdarzenia
FAZA 2 = bubbliin zdarzenia

34.Jakie są fazy event flow?
Fazy te znajdują się w stałych i mogą mieć wartości:
Event.NONE              - 0
Event.CAPTURING_PHASE   - 1
Event.AT_TARGET         - 2
Event.BUBBLING_PHASE    - 3

35.Czy można sprawdzić czy event jest domyślnie generowany czy przez nas?
Za pomocą Event.isTrusted
isTrusted == false - customowy, element.dispatchEvent(customEvent)
                    event was generated by script
isTrusted == true - event was generated by a user action

36.Jak można sprawdzić typ zdarzenia?
Event.type
Może to być jeden ze standardowych typów:https://developer.mozilla.org/en-US/docs/Web/Events
lub customowa nazwa nadana przez nas.

37.Czy event posiada pole z czasem jego wystąpienia?
Tak, jest to event.timestamp

38.Różnica między event.stopPropagation() a event.stopImmediatePropagation()?

event.stopPropagation() allows other handlers on the same element to be executed,
while event.stopImmediatePropagation() prevents every event from running.

https://stackoverflow.com/questions/5299740/stoppropagation-vs-stopimmediatepropagation

PYTANIA:
1.Jak przeglądarki pobierają pliki .js. Czy robią to jeden po drugim, czy równolegle?
Jak pobierają css oraz image(równolegle)?

-zrobić edycję tabeli za pomocą DOMu